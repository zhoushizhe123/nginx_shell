user nginx; 
worker_processes  1;
worker_rlimit_nofile 65535;

error_log  logs/error.log;
pid        logs/nginx.pid;


events {
    worker_connections  65535;
    multi_accept on;
    use epoll;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    
    map $http_x_forwarded_for  $clientRealIp {
      ""    $remote_addr;
      ~^(?P<firstAddr>[0-9\.]+),?.*$    $firstAddr;
    }

    log_format main   '$clientRealIp -[$time_local] -- $proxy_add_x_forwarded_for'
	'proxyIP[$proxy_protocol_addr]  '
	'fwf[$http_x_forwarded_for] tip[$http_true_client_ip] '
	'$upstream_addr p$upstream_response_time q$request_time '
	'$http_host "$request"'
	'"$status" $body_bytes_sent "$http_referer" '
	'"$http_accept_language" "$http_user_agent" '

	 ### 用户的 IP 地址  作为 Key，每个 IP 地址最多有 50 个并发连接
	 #### 你想开 几千个连接 刷死我？ 超过 50 个连接，直接返回 503 错误给你，根本不处理你的请求了
	 #  limit_conn_zone $clientRealIp zone=TotalConnLimitZone:10m ;
	 #  limit_conn  TotalConnLimitZone  50;
	 #  limit_conn_log_level notice;

	 #### 用户的 IP 地址  作为 Key，以ConnLimitZone 为名 每个 IP 地址每秒处理 80 个请求
	 #### 你想用程序每秒几百次的刷我，没戏，再快了就不处理了，直接返回 503 错误给你
	 #  limit_req_zone $clientRealIp  zone=ConnLimitZone:10m  rate=80r/s;
	 #  limit_req_log_level notice; 
    
    charset  utf-8;

    vhost_traffic_status_zone;
    vhost_traffic_status_filter_by_host on;
  
    lua_shared_dict limit 20m;
    lua_shared_dict jump 20m;
    lua_code_cache on;
    server_tokens off;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 300m;

    req_status_zone server_name $server_name 256k;
    req_status_zone server_addr $server_addr 256k;
    req_status_zone server_url $server_name$uri 256k;
    req_status server_name server_addr server_url;

    sendfile on;
    tcp_nopush     on;
    keepalive_timeout 60;
    tcp_nodelay on;

    # include  /usr/local/nginx/conf/sites/https.conf;

    client_body_buffer_size  1280k;
    proxy_connect_timeout    900;
    proxy_read_timeout       900;
    proxy_send_timeout       900;
    proxy_buffer_size        1024k;
    proxy_buffers            40 1024k;
    proxy_busy_buffers_size 1024k;
    proxy_temp_file_write_size 1024k;

    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.1;
    gzip_comp_level 2;
    gzip_types       text/plainapplication/x-javascript text/css application/xml video/mp4;
    gzip_vary on;
	 
    fastcgi_connect_timeout 5s;
    fastcgi_send_timeout 6000s;
    fastcgi_read_timeout 6000s;
    fastcgi_buffer_size 128k;
    fastcgi_buffers 256 16k;
    fastcgi_busy_buffers_size 1m;
    fastcgi_temp_file_write_size 1m;
	 
    realtime_zonesize 16m;
	 
	 
    geoip2 /etc/geoip/GeoLite2-Country.mmdb {
	auto_reload 5m;
        $geoip2_metadata_country_build metadata build_epoch;
        $geoip2_country_code default=US country iso_code;
        $geoip2_country_name country names zh-CN;
    }
 
    geoip2 /etc/geoip/GeoLite2-City.mmdb {
	$geoip2_city_name default=ShangHai city names zh-CN;
	$geoip2_continent_code continent code;
    }
##### 反代，根据需要开启 #####
#    upstream 自定义 {
#                server 172.16.0.20:7001 weight=1 max_fails=3 fail_timeout=60;
#                server 172.16.0.21:7001 weight=1 max_fails=3 fail_timeout=60;
#    }
	
# 显示的定义一个 default server
#    server {
#	 listen  443 ssl;
#       listen  80 default_server;
#       server_name _;
#       return  403; # 403 forbidden
#       ssl on;
#       ssl_certificate 	   /usr/local/nginx/ssl/xx99.com.crt;
#       ssl_certificate_key   /usr/local/nginx/ssl/xx99.com.key;
#		access_log             /usr/local/nginx/logs/def-access.log json;
#		error_log              /usr/local/nginx/logs/def-error.log;
#    }

    server {
	listen 9000;
	server_name localhost;
	access_log             /usr/local/nginx/logs/status-access.log json;
	error_log              /usr/local/nginx/logs/status-error.log;
	location / {
		root /usr/local/nginx/html;
		index index.html index.htm;
	}
    }
    server {
        listen 8001;
        server_name localhost;
        access_log             /usr/local/nginx/logs/echo-access.log json;
        error_log              /usr/local/nginx/logs/echo-error.log;
        location / {
                root /usr/local/nginx/html;
                index index.html index.htm;
        }
	location /test {
        	echo $clientRealIp;
    	}
    }	
    server {
        listen 8002;
        server_name localhost;
        access_log             /usr/local/nginx/logs/lua-access.log json;
        error_log              /usr/local/nginx/logs/lua-error.log;
        location / {           
                root /usr/local/nginx/html;
                index index.html index.htm;
        }
        location /lua-test { 
        	default_type 'text/plain'; 
        	content_by_lua 'ngx.say("hello, lua")'; 
        }
    }
    server {
        listen 8003;
        server_name localhost;
        access_log             /usr/local/nginx/logs/myip-access.log json;
        error_log              /usr/local/nginx/logs/myip-error.log;
        location / {           
                root /usr/local/nginx/html;
                index index.html index.htm;
        }
       location /myip {
		default_type text/plain;
       		return 200 "\$remote_addr \$geoip2_city_name \$geoip2_country_code \$geoip2_continent_code";
       }
    }
    server {
        listen 8004;
        server_name localhost;
        access_log             /usr/local/nginx/logs/realtime-access.log json;
        error_log              /usr/local/nginx/logs/realtime-error.log;
        location / {
                root /usr/local/nginx/html;
                index index.html index.htm;
        }
	location /real-status {
		realtime_request on;
	}
    }
    server {
        listen 8005;
        server_name localhost;
        access_log             /usr/local/nginx/logs/reqstatus-access.log json;
        error_log              /usr/local/nginx/logs/reqstatus-error.log; 
        location / {           
                root /usr/local/nginx/html;
                index index.html index.htm;
        }
	location /reqstatus {
        	req_status_show on;
	}
    }
    server {
        listen 8006;
        server_name localhost;
        access_log             /usr/local/nginx/logs/vts-access.log json;
        error_log              /usr/local/nginx/logs/vts-error.log; 
        location / {           
                root /usr/local/nginx/html;
                index index.html index.htm;
        }
	location /vts {
        	vhost_traffic_status_display; 
        	vhost_traffic_status_display_format html;
	}
  
	if ($request_method !~ ^(GET|HEAD|POST)$ ) {
		return 444;
	}    
####阻止User-Agents,如扫描器，机器人以及滥用你服务器的垃圾邮件发送者。
	if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
		return 405;
	}
	if ( $http_user_agent ~* "Windows 5.1" ) {
		return 445;
	}	
    
    }
include	/usr/local/nginx/conf.d/*.conf;
}
